//will containe the logic of your app. Running it in Terminal/Bash will start the game.
//the app should end when a player guesses the correct word or runs out of guesses

//================================================================================
//GLOBAL VARIABLES (aCCESSIBLE BY ALL FUNCTIONS)
//================================================================================


//ARRAY OF WORD OPTIONS (ALL LOWERCASE)
var wordsList = ["sunflower", "daffodil", "chrysanthemum", "tigerlily", "rose", "daisy", "gardenia", "sweetpea", "orchid", "forgetmenot", "dandelion", "tulip", "mum", "chamomile", "marigold", "dahlia", "peony"];
var chosenWord = ""; //solution will generated by game.js
var lettersInChosenWord = [];// This will break the solution into individual letters to be stored in array
var numBlanks = 0; // This will be the number of blanks we show based on the solution
var blanksAndSuccesses = []; // Holds a mix of blank and solved letters (ex: 'n, _ _, n, _')
var wrongGuesses = []; // Holds all of the wrong guesses


// Game counters
var winCounter  = 0;
var lossCounter = 0;
var numGuesses  = 9;

// FUNCTIONS (These are bits of code that we will call upon to run when needed)
// ==================================================================================================

// startGame()
// Its how we we will start and restart the game.

function startGame() {
    numGuesses = 9;

  	chosenWord = wordsList[Math.floor(Math.random() * wordsList.length)]; // solution is chosen randomly from wordList

  	lettersInChosenWord = chosenWord.split(""); // the word is broken into individual letters

  	numBlanks = lettersInChosenWord.length; // we count the number of letters in the word

  	console.log(chosenWord); // We print the solution in console (for testing)

  	blanksAndSuccesses = []; // reset the guess and success array at each round.

  	wrongGuesses = []; // reset the wrong guesses from the previous round.

  	// Fill up the blanksAndSuccesses list with appropriate number of blanks. This is based on number of letters in solution
  	for (var i=0; i <numBlanks; i++){
  		blanksAndSuccesses.push("_");
  	}

  	console.log(blanksAndSuccesses); // print the initial blanks in console.


  	// Reprints the guessesLeft to 9
  	numGuesses;

  	// Prints the blanks at the beginning of each round in the HTML
    blanksAndSuccesses.join(" ");

  	// Clears the wrong guesses from the previous round
  	 wrongGuesses.join(" ");

  }
}

// roundComplete() function
// Here we will have all of the code that needs to be run after each guess is made
function roundComplete(){

	// First, log an initial status update in the console telling us how many wins, losses, and guesses are left
	console.log("WinCount: " + winCounter + " | LossCount: " + lossCounter + " | NumGuesses: " + numGuesses);

	//  update the correct guesses.
  blanksAndSuccesses.join(" "); // This will print the array of guesses and blanks onto the page

  wrongGuesses.join(" "); // this will print the wrong guesses onto the page.

	// If we have gotten all the letters to match the solution...
	if (lettersInChosenWord.toString() == blanksAndSuccesses.toString()) {
		winCounter++; // add to the win counter
		console.log("You are a busy bee! All the FLOWER POWER to you!"); // give the user an alert

		startGame(); // restart the game
	}

	// If we've run out of guesses
	else if(numGuesses == 0) {
		lossCounter++; 	 // add to the loss counter
		console.log("Better luck next time!");

		// Update the loss counter

		startGame(); // restart the game
	}

}

// MAIN PROCESS

//================================================================================================

// Starts the Game by running the startGame() function
startGame();

// Then initiates the function for capturing key clicks.
document.onkeyup = function(event) {
	letterGuessed = String.fromCharCode(event.keyCode).toLowerCase(); // converts all key clicks to lowercase lettesr

	checkLetters(letterGuessed); // runs the code to check for correctness
	roundComplete(); // runs the code after each round is done
}

==========================================================================

// Use process.argv [2] [3] to read letter input

// SOLUTION 1 - More Obvious
var a = process.argv[2];
var b = process.argv[3];

if (a == b){
	console.log(true);
}
else {
	console.log(false);
}


// SOLUTION 2 - Simplified (Refactored)
console.log(process.argv[2] == process.argv[3]);




==========================================================================

//example code for saving inputs 


// Load the NPM Package inquirer
var inquirer = require('inquirer');

// Create a "Prompt" with a series of questions.
inquirer.prompt([

	// Here we create a basic text prompt.
	{
		type: "input",
		message: "What is your name?",
		name: "name"
	},

	// Here we create a basic password-protected text prompt.
	{
		type: "password",
		message: "Set your password",
		name: "password"
	},

	// Here we give the user a list to choose from.
	{
		type: "checkbox",
		message: "Which Pokemon do you choose?",
		choices: ["Bulbasaur", "Squirtle", "Charmander"],
		name: "pokemon"
	},

	// Here we ask the user to confirm.
	{
		type: "confirm",
		message: "Are you sure:",
		name: "confirm",
		default: false

	}

// Once we are done with all the questions... "then" we do stuff with the answers
// In this case, we store all of the answers into a "user" object that inquirer makes for us.
]).then(function (user) {


	// If we log that user as a JSON, we can see how it looks.
	console.log(JSON.stringify(user, null, 2));

	// If the user confirms, we displays the user's name and pokemon from the answers.
	if (user.confirm){

		console.log("==============================================");
		console.log("");
		console.log("Welcome " + user.name);
		console.log("Your " + user.pokemon + " is ready for battle!");
		console.log("");
		console.log("==============================================");

	// If the user does not confirm, then a message is provided and the program quits.
	}

	else {

		console.log("");
		console.log("");
		console.log("That's okay " + user.name + ", come again when you are more sure.");
		console.log("");
		console.log("");

	}

});
